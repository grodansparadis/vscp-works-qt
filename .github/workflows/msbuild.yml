name: Windows Build

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .
  VSCP_PATH: "${{ github.workspace }}/vscp"

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #
  # https://github.com/marketplace/actions/run-vcpkg
  # https://github.com/ilammy/msvc-dev-cmd

  BUILD_CONFIGURATION: Release

jobs:
  build:
    name: Windows x64
    runs-on: windows-2022

    steps:

    - name: Install ms-dev environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
  
    # https://ddalcino.github.io/aqt-list-server/      
    - name: Prepare Qt Libraries
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtcharts'
        archives: 'qtbase qtsvg qttools qtwebsockets qtserialbus qtserialport qtdeclarative'
        cache: 'true'
        cache-key-prefix: 'install-qt-action'
        setup-python: 'true'
        tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'
        set-env: 'true'
        tools-only: 'false'
        aqtversion: '==3.1.*'
        py7zrversion: '==0.20.*'
        extra: '--external 7z'
         
    - name: Clone
      uses: actions/checkout@v3

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.14

    - name: Checkout vscp repo
      uses: actions/checkout@v3
      with:
        repository: grodansparadis/vscp
        path: vscp
        ref: development

    # - name: Install vcpkg
    #   uses: lukka/run-vcpkg@v2
    #   with:
    #     vcpkgDirectory: '${{ github.workspace }}/vcpkg'
    #     vcpkgArguments: '@${{ github.workspace }}/vcpkg.txt'
    #     appendedCacheKey: ${{ hashFiles(env.vcpkgResponseFile) }}

    # Install latest CMake.
    - name: Get cmake
      uses: lukka/get-cmake@latest
      #with:
        # Just install vcpkg for now, do not install any ports in this step yet.
      #  setupOnly: true
        # Location of the vcpkg as submodule of the repository.
      #  vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
        # compute its hash and append this to the computed cache's key.
      #  appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
      #  vcpkgTriplet: ${{ matrix.triplet }}
        # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed'.
      #  additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed

    # - name: Add Component
    #   shell: cmd
    #   run: |
    #     "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" modify --channelId VisualStudio.16.Release --productId Microsoft.VisualStudio.Product.Enterprise -q --includeRecommended --add "Microsoft.VisualStudio.Component.VC.14.25.x86.x64"

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64

    - name: Install 7Zip PowerShell Module
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose

    #- name: Prepare Qt Libraries
    #  uses: jurplel/install-qt-action@v2

    - name: Cache vcpkg
      id: cache-vcpkg
      uses: actions/cache@v2
      with:
        path: vcpkg
        key: ${{ runner.os }}-vcpkg

    - name: Checkout vcpkg repo
      uses: actions/checkout@v3
      with:
        repository: microsoft/vcpkg
        path: ${{ github.workspace }}/vcpkg    

    - name: Integrate with development environment and install
      shell: cmd
      working-directory: ${{ github.workspace }}/vcpkg
      run: |
        call ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat
        ${{ github.workspace }}/vcpkg/vcpkg.exe integrate install 
        ${{ github.workspace }}/vcpkg/vcpkg.exe install curl:x64-windows
        ${{ github.workspace }}/vcpkg/vcpkg.exe install expat:x64-windows
        ${{ github.workspace }}/vcpkg/vcpkg.exe install spdlog:x64-windows
        ${{ github.workspace }}/vcpkg/vcpkg.exe install libmosquitto:x64-windows        
        ${{ github.workspace }}/vcpkg/vcpkg.exe install pthread:x64-windows 
        ${{ github.workspace }}/vcpkg/vcpkg.exe install dlfcn-win32:x64-windows 
        ${{ github.workspace }}/vcpkg/vcpkg.exe install openssl:x64-windows 
        ${{ github.workspace }}/vcpkg/vcpkg.exe install paho-mqtt:x64-windows 

    # ${{ github.workspace }}/vcpkg/vcpkg.exe install qt5:x64-windows 
    # ${{ github.workspace }}/vcpkg/vcpkg.exe install qt5-charts:x64-windows
    # - name: Setup cmake
    #   uses: jwlawson/actions-setup-cmake@v1.12
    # - name: Cmake
    #   run: |
    #     git clone https://github.com/microsoft/vcpkg
    #     vcpkg\bootstrap-vcpkg.bat
      #  vcpkg\vcpkg install cpprestsdk:x64-windows
      #  cd my-project\build
      #  cmake .. -DCMAKE_TOOLCHAIN_FILE=D:/a/vscp-works-qt/vscp-works-qt/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Create Build Environment
      run: |
        mkdir build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system   -G "Visual Studio 16 2019"
      shell: bash
      working-directory: "${{github.workspace}}/build"
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      # cmake .. -G "Visual Studio 17 2022" -A x64 -DVCPKG_TARGET_TRIPLET=x64-windows -D"CMAKE_TOOLCHAIN_FILE=D:/a/vscp-works-qt/vscp-works-qt/vcpkg/scripts/buildsystems/vcpkg.cmake" -D"VSCP_PATH=${{ github.workspace }}/vscp/"

      run: |
        cmake .. -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022" -A x64 -DVCPKG_TARGET_TRIPLET=x64-windows -D"CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vscp-works-qt/vcpkg/scripts/buildsystems/vcpkg.cmake"
        cd "${{github.workspace}}/build"
        cmake --build .

    #- #name: Build
      #working-directory: ${{ github.workspace }}/build
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      #run: |        
      #  call "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      #  msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
