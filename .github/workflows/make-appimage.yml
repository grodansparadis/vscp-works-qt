name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-16.04
    continue-on-error: true

    steps:
    # https://github.com/actions/checkout  
    - uses: actions/checkout@v2

    - name: Checkout vscp repo
      uses: actions/checkout@v2
      with:
        repository: grodansparadis/vscp
        path: vscp
        ref: development

    # https://launchpad.net/~beineri/+archive/ubuntu/opt-qt-5.15.2-xenial
    - name: Set QT repo
      run: sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-xenial -y 

    - name: Update apt  
      run: sudo apt-get update
    
    - name: Install QT
      run: sudo apt-get -y install qt515base qt515declarative qt515connectivity qt515imageformats qt515serialport qt515serialbus qt515doc qt515tools qt515quickcontrols qt515quickcontrols2 libgl1-mesa-dev     

    # For build
    - name: Install qttools5-dev
      run: sudo apt-get -y install qttools5-dev-tools qtdeclarative5-dev libqt5serialport5 libqt5serialport5-dev 

    - name: Test tools location
      run: ls /usr/lib/x86_64-linux-gnu/cmake/Qt5LinguistTools

    - name: Set the correct environment for QT       
      run: /opt/qt515/bin/qt515-env.sh

    - name: Install libmosuitto-dev manually
      run: sudo apt install libmosquitto-dev

    - name: Install libexpat-dev manually
      run: sudo apt install libexpat-dev

    - name: Install libssl-dev manually
      run: sudo apt-get install libssl-dev

    - name: Install gtest manually
      run: sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake CMakeLists.txt && sudo make && sudo cp *.a /usr/lib && sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a && sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: get linuxdeployqt 
      run: wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
      
    - name: Make linuxdeployqt executable  
      run: chmod a+x linuxdeployqt-continuous-x86_64.AppImage

    - name: 
      run: ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/local/share/applications/vscpworks.desktop -appimage -extra-plugins=iconengines,platformthemes/libqgtk3.so,canbus

 