name: Linux Build

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VSCP_ROOT: ${{github.workspace}}/vscp

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:

      # https://github.com/marketplace/actions/install-qt
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: 6.8.0
        host: 'linux'
        target: 'desktop'
        arch: 'linux_gcc_64'
        dir: ${{ github.workspace }}/qt/
        modules: 'qtcharts qtconnectivity qtserialbus qtserialport qtwebsockets'

      # https://github.com/actions/checkout  
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Checkout vscp repo
      uses: actions/checkout@v4
      with:
        repository: grodansparadis/vscp
        path: ${{github.workspace}}/vscp
        ref: development  
        submodules: recursive

    - name: Create environment variable for VSCP_ROOT and Qt6_DIR
      run: |
        export VSCP_ROOT=${{github.workspace}}/vscp
        echo echo ${{env.VSCP_ROOT}}

    - name: test
      run: |
        export Qt6_DIR=${{env.QT_ROOT_DIR}}/lib/cmake/Qt6/
        echo $Qt6_DIR
        echo $QT_ROOT_DIR
        export TTT=${{env.QT_ROOT_DIR}}/lib/cmake/Qt6/
        echo "${{env.TTT}}"
        echo "Hello"
        echo $TTT
        echo $Qt6_DIR

    - name: Checkout eclipse paho repo
      uses: actions/checkout@v4
      with:
        repository: eclipse/paho.mqtt.c
        path: paho

    - name: Update before installing packages
      run: sudo apt-get update

    - name: Install libmosquitto-dev manually
      run: sudo apt-get install libmosquitto-dev
    
    - name: Install libexpat-dev manually
      run: sudo apt-get install libexpat-dev

    - name: Install libssl-dev manually
      run: sudo apt-get install libssl-dev

    - name: Install libcurl4-openssl-dev manually 
      run: sudo apt install libcurl4-openssl-dev  

    - name: Install libwebsockets-dev 
      run: sudo apt install libwebsockets-dev   

    - name: Install paho manually
      run: cd paho && mkdir build && cd build && sudo cmake -DPAHO_WITH_SSL=true .. && sudo make install
       
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2 
    
    - name: Create Build Environment
      run: |
        mkdir build && cd build
        cmake  -DCMAKE_BUILD_TYPE=Release  -DCMAKE_INSTALL_PREFIX=/usr -DVSCP_ROOT=${{github.workspace}}/vscp/ -DVSCP_PATH=${{github.workspace}}/vscp/ -DCMAKE_PREFIX_PATH=${{env.QT_ROOT_DIR}} -DQt6_DIR:PATH=/home/runner/work/vscp-works-qt/vscp-works-qt/qt/Qt/6.8.0/gcc_64/lib/cmake/Qt6 -DQT_ADDITIONAL_PACKAGES_PREFIX_PATH=/home/runner/work/vscp-works-qt/vscp-works-qt/qt/Qt/6.8.0/gcc_64/lib/cmake/Qt6 ..

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        make -j$(nproc)
        make install DESTDIR=AppDir

