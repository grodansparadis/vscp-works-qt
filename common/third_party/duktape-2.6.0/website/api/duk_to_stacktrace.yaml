name: duk_to_stacktrace

proto: |
  const char *duk_to_stacktrace(duk_context *ctx, duk_idx_t idx);

stack: |
  [ ... val! ... ] -> [ ... val.stack! ... ]

summary: |
  <p>Coerce an arbitrary value to a stack trace.  The value at <code>idx</code>
  is expected but not required to be an Error instance.  If the argument is an
  object, the call looks up the argument's <code>.stack</code> property which
  becomes the result if the property value is a string.  Otherwise the argument
  is replaced with <code>duk_to_string(val)</code> to ensure a string result.
  An error may also be thrown if the coercion fails e.g. due to side effects or
  out-of-memory.</p>

  <p>There is a safe variant of this API call,
  <code><a href="#duk_safe_to_stacktrace">duk_safe_to_stacktrace()</a></code>,
  which may be more useful when dealing with errors.</p>

  <p>ECMAScript equivalent of the value coercion:</p>
  <pre class="ecmascript-code">
  function duk_to_stacktrace(val) {
      if (typeof val === 'object' && val !== null) {  // Require val to be an object.
          var t = val.stack;  // Side effects, may throw.
          if (typeof t === 'string') {  // Require .stack to be a string.
              return t;
          }
      }
      return String(val);  // Side effects, may throw.
  }
  </pre>

  <p>The coercion intentionally avoids an <code>instanceof</code> check
  (based on inheritance) so that the call can also work on foreign Error
  objects created in another global environment (Realm).</p>

example: |
  if (duk_peval_string(ctx, "1 + 2 +") != 0) {  /* => SyntaxError */
      printf("failed: %s\n", duk_to_stacktrace(ctx, -1));  /* Note: may throw */
  } else {
      printf("success\n");
  }
  duk_pop(ctx);

tags:
  - stack
  - string

seealso:
  - duk_to_string
  - duk_safe_to_stacktrace

introduced: 2.4.0
