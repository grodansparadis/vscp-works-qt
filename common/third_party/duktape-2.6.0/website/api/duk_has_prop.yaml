name: duk_has_prop

proto: |
  duk_bool_t duk_has_prop(duk_context *ctx, duk_idx_t obj_idx);

stack: |
  [ ... obj! ... key! ] -> [ ... obj! ... ]

summary: |
  <p>Check whether value at <code>obj_idx</code> has a property <code>key</code>.
  <code>key</code> is removed from the stack.  Return code and error throwing
  behavior:</p>
  <ul>
  <li>If the property exists, <code>1</code> is returned.</li>
  <li>If the property doesn't exist, 0 is returned.</li>
  <li>If the value at <code>obj_idx</code> is not an object, an error is thrown.</li>
  <li>If <code>obj_idx</code> is invalid, an error is thrown.</li>
  </ul>

  <p>The property existence check is equivalent to the ECMAScript expression
  <code>res = key in obj</code>.  For semantics, see
  <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.1">Property Accessors</a>,
  <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.8.7">The in operator</a>,
  and <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.6">[[HasProperty]] (P)</a>.
  The <code>key</code> is coerced:</p>
  <ul>
  <li>The <code>key</code> argument is internally coerced using ToPropertyKey()
      coercion which results in a string or a Symbol.  There is an internal
      fast path for arrays and numeric indices which avoids an explicit string
      coercion, so use a numeric <code>key</code> when applicable.</li>
  </ul>

  <p>If the target is a Proxy object which implements the <code>has</code> trap,
  the trap is invoked and the API call return value matches the trap return value.</p>

  <div class="note">
  Instead of accepting any
  <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-9.10">object coercible</a>
  value (like most property related API calls) this call accepts only an object
  as its target value.  This is intentional as it follows ECMAScript operator semantics.
  </div>

  <p>If the key is a fixed string you can avoid one API call and use the
  <code><a href="#duk_has_prop_string">duk_has_prop_string()</a></code> variant.
  Similarly, if the key is an array index, you can use the
  <code><a href="#duk_has_prop_index">duk_has_prop_index()</a></code> variant.</p>

example: |
  duk_push_string(ctx, "myProperty");
  if (duk_has_prop(ctx, -3)) {
      printf("obj has 'myProperty'\n");
  } else {
      printf("obj does not have 'myProperty'\n");
  }

tags:
  - property

seealso:
  - duk_has_prop_index
  - duk_has_prop_string
  - duk_has_prop_lstring
  - duk_has_prop_literal
  - duk_has_prop_heapptr

introduced: 1.0.0
